---

---

<!--
  -->
<script type="module">
  // const
  const canvas = document.querySelector('#tetris');
  const context = canvas.getContext('2d');
  const $span = document.querySelector('span');
  const $score = document.querySelector('#score');
  const $section = document.querySelector('#StartGame');
  const $sectionGame = document.querySelector('#sectionGame');
  // grid
  const scale = 10;
  const boardWidth = 24;
  const boardHeight = 12;

  let score = 0;
  let gameLoop; // Declaramos gameLoop aquí
  // canvas
  canvas.width = boardWidth * scale;
  canvas.height = boardHeight * scale;
  context.scale(scale, scale);
  // 3. board

  const board = []; // 10* 20
  context.fillStyle = 'rgba(0, 0, 0, 0.75)';
  context.fillRect(0, 0, canvas.width, canvas.height);
  context.fillStyle = 'white';
  context.font = '2px Arial';
  context.textAlign = 'center';
  context.fillText('Tetrish Rush', boardWidth / 2, boardHeight / 2);

  for (let i = 0; i < boardHeight; i++) {
    board.push(new Array(boardWidth).fill(0));
  }
  // piezas player
  const pices = {
    cube: {
      position: { x: 0, y: 0 },
      shape: [
        [1, 1],
        [1, 1],
      ],
    },
    T: {
      position: { x: 0, y: 0 },
      shape: [
        [0, 1, 0],
        [1, 1, 1],
      ],
    },
    L: {
      position: { x: 0, y: 0 },
      shape: [
        [0, 0, 1],
        [1, 1, 1],
      ],
    },
    J: {
      position: { x: 0, y: 0 },
      shape: [
        [1, 0, 0],
        [1, 1, 1],
      ],
    },
    I: {
      position: { x: 0, y: 0 },
      shape: [
        [1, 0, 0],
        [1, 0, 0],
        [1, 0, 0],
      ],
    },
    S: {
      position: { x: 0, y: 0 },
      shape: [
        [0, 1, 1],
        [1, 1, 0],
      ],
    },
  };
  // settng
  let dropcouter = 0;
  let lastestime = 0;
  let acceleration = 1; // Velocidad inicial
  let timeSinceLastAcceleration = 0; // Tiempo desde la última aceleración

  // Update
  function update(time = 0) {
    const deltaTime = time - lastestime;
    lastestime = time;
    dropcouter += deltaTime;
    timeSinceLastAcceleration += deltaTime;

    if (timeSinceLastAcceleration > 30000) {
      timeSinceLastAcceleration = 0;
      acceleration += 0.5;
    }

    if (dropcouter > 1000 / acceleration) {
      pices.cube.position.y++;
      if (checkCollision()) {
        pices.cube.position.y--;
        solidify();
        removeRows();
      }
      dropcouter = 0;
    }

    draw();
    gameLoop = window.requestAnimationFrame(update);
  }
  // Draw
  function draw() {
    context.fillStyle = '#000';
    context.fillRect(0, 0, canvas.width, canvas.height);

    board.forEach((row, y) => {
      row.forEach((value, x) => {
        if (value > 0) {
          context.fillStyle = 'yellow';
          context.fillRect(x, y, 1, 1);
        }
      });
    });

    pices.cube.shape.forEach((row, y) => {
      row.forEach((value, x) => {
        if (value > 0) {
          context.fillStyle = 'red';
          context.fillRect(
            x + pices.cube.position.x,
            y + pices.cube.position.y,
            1,
            1
          );
        }
      });
    });
  }

  document.addEventListener('keydown', event => {
    const rotate = [];
    const previusShape = pices.cube.shape;
    switch (event.keyCode) {
      case 37:
        pices.cube.position.x--;
        if (checkCollision()) {
          pices.cube.position.x++;
        }
        event.preventDefault();
        break;
      case 39:
        pices.cube.position.x++;
        if (checkCollision()) {
          pices.cube.position.x--;
        }
        event.preventDefault();
        break;
      case 40:
        pices.cube.position.y++;
        if (checkCollision()) {
          pices.cube.position.y--;
          solidify();
          removeRows();
        }
        event.preventDefault();
        break;
      case 38:
        for (let i = 0; i < pices.cube.shape[0].length; i++) {
          const row = [];
          for (let j = pices.cube.shape.length - 1; j >= 0; j--) {
            row.push(pices.cube.shape[j][i]);
          }
          rotate.push(row);
        }
        pices.cube.shape = rotate;
        if (checkCollision()) {
          pices.cube.shape = previusShape;
        }
        event.preventDefault();
        break;
    }
  });

  function checkCollision() {
    return pices.cube.shape.find((row, y) => {
      return row.find((value, x) => {
        return (
          value !== 0 &&
          board[y + pices.cube.position.y]?.[x + pices.cube.position.x] !== 0
        );
      });
    });
  }

  function solidify() {
    pices.cube.shape.forEach((row, y) => {
      row.forEach((value, x) => {
        if (value === 1) {
          board[y + pices.cube.position.y][x + pices.cube.position.x] = 1;
        }
      });
    });
    const PIECES = new Array(6).fill(0).map((_, i) => {
      return Object.values(pices)[i];
    });
    pices.cube.position = {
      x: Math.floor(boardWidth / pices.cube.shape[0].length),
      y: 0,
    };
    pices.cube.shape = PIECES[Math.floor(Math.random() * PIECES.length)].shape;

    if (checkCollision()) {
      gameOver();
      board.forEach(row => row.fill(0));
    }
  }

  function removeRows() {
    board.forEach((row, y) => {
      if (row.every(value => value === 1)) {
        board.splice(y, 1);
        const newRow = new Array(boardWidth).fill(0);
        board.unshift(newRow);
        score += 10;
        $score.textContent = score;
      }
    });
  }

  function stopGame() {
    cancelAnimationFrame(gameLoop);
    document.querySelector('#StopGame').style.display = 'none';
    $section.style.display = 'flex';
    context.fillStyle = 'rgba(0, 0, 0, 0.75)';
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = 'white';
    context.font = '1px Arial';
    context.textAlign = 'center';
    context.fillText('Game Stopped', boardWidth / 2, boardHeight / 2);
    context.fillText(`Score: ${score}`, boardWidth / 2, boardHeight / 2 + 2);
  }

  function gameOver() {
    cancelAnimationFrame(gameLoop); // Usamos gameLoop aquí
    document.querySelector('#StopGame').style.display = 'none';
    $section.style.display = 'flex';
    context.fillStyle = 'rgba(0, 0, 0, 0.75)';
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.fillStyle = 'white';
    context.font = '2px Arial';
    context.textAlign = 'center';
    context.fillText('Game Over', boardWidth / 2, boardHeight / 2);
    context.fillText(`Score: ${score}`, boardWidth / 2, boardHeight / 2 + 2);
  }

  $section.addEventListener('click', () => {
    update();
    $sectionGame.insertAdjacentHTML(
      'afterbegin',
      ` 
      <button class="px-1 flex" id="StopGame">
        <svg
          aria-hidden="true"
          height="16"
          viewBox="0 0 16 16"
          version="1.1"
          width="16"
          data-view-component="true"
          class="fill-current text-gray-400 w-4 h-4 mt-1 mr-1"
        >
          <path
            d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"
          ></path>
        </svg>
         Stop Game
      </button>`
    );
    $section.style.display = 'none';
    $span.style.display = 'block';
    canvas.style.display = 'block';
    const audio = new window.Audio('./tetris.mp3');
    audio.volume = 0.1;
    audio.play();
    // Añadir event listener para el botón de Stop
    document.querySelector('#StopGame').addEventListener('click', stopGame);
  });
  
</script>
<div class="w-full justify-center">
  <h1 class="text-3xl text-center font-bold text-orange-500">Tetris Rush</h1>
  <section class="mx-1">
    <div id="sectionGame" class="flex justify-between mb-3">
      <button class="px-1 flex" id="StartGame">
        <svg
          aria-hidden="true"
          height="16"
          viewBox="0 0 16 16"
          version="1.1"
          width="16"
          data-view-component="true"
          class="fill-current text-gray-400 w-4 h-4 mt-1 mr-1"
        >
          <path
            d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"
          ></path>
        </svg>
         Start Game
      </button>
      <span>
        Points:
        <strong id="score">0</strong>
      </span>
    </div>
  </section>
  <section class="flex justify-center">
    <canvas
      id="tetris"
      class="border border-gray-500 rounded-md w-[600px] h-[300px]"></canvas>
  </section>
</div>
